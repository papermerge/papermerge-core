# Generated by Django 4.2.4 on 2023-10-30 06:51

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
import taggit.managers
from django.conf import settings
from django.db import migrations, models

import papermerge.core.validators


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="BaseTreeNode",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "ctype",
                    models.CharField(
                        blank=True,
                        choices=[("folder", "folder"), ("document", "document")],
                        max_length=16,
                        null=True,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=200,
                        validators=[
                            papermerge.core.validators.safe_character_validator
                        ],
                        verbose_name="Title",
                    ),
                ),
                (
                    "lang",
                    models.CharField(
                        default="deu", max_length=8, verbose_name="Language"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.basetreenode",
                        verbose_name="parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Documents",
                "verbose_name_plural": "Documents",
            },
        ),
        migrations.CreateModel(
            name="DocumentVersion",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "lang",
                    models.CharField(
                        default="deu", max_length=8, verbose_name="Language"
                    ),
                ),
                (
                    "number",
                    models.IntegerField(default=1, verbose_name="Version number"),
                ),
                ("file_name", models.CharField(blank=True, max_length=1024, null=True)),
                (
                    "size",
                    models.BigIntegerField(
                        default=0,
                        help_text="Size of file_orig attached. Size is in Bytes",
                    ),
                ),
                ("page_count", models.IntegerField(default=0)),
                (
                    "short_description",
                    models.CharField(blank=True, default="", max_length=128),
                ),
                ("text", models.TextField(blank=True)),
            ],
            options={
                "verbose_name": "Document version",
                "verbose_name_plural": "Document versions",
                "ordering": ("number",),
            },
        ),
        migrations.CreateModel(
            name="Document",
            fields=[
                (
                    "basetreenode_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.basetreenode",
                    ),
                ),
                ("ocr", models.BooleanField(default=True)),
                (
                    "ocr_status",
                    models.CharField(
                        choices=[
                            ("unknown", "Unknown"),
                            ("received", "Received"),
                            ("started", "Started"),
                            ("succeeded", "Succeeded"),
                            ("failed", "Failed"),
                        ],
                        default="UNKNOWN",
                        max_length=32,
                    ),
                ),
            ],
            options={
                "verbose_name": "Document",
                "verbose_name_plural": "Documents",
            },
            bases=("core.basetreenode",),
        ),
        migrations.CreateModel(
            name="Folder",
            fields=[
                (
                    "basetreenode_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="core.basetreenode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Folder",
                "verbose_name_plural": "Folders",
            },
            bases=("core.basetreenode",),
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                (
                    "bg_color",
                    models.CharField(
                        default="#c41fff", max_length=7, verbose_name="Background Color"
                    ),
                ),
                (
                    "fg_color",
                    models.CharField(
                        default="#FFFFFF", max_length=7, verbose_name="Foreground Color"
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        max_length=1024,
                        null=True,
                        verbose_name="Description (optional)",
                    ),
                ),
                (
                    "pinned",
                    models.BooleanField(
                        default=False,
                        help_text="Pinned tag will be displayed under Documents menu. It serves as shortcut to quickly filter folders/documents associated with this tag",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=100,
                        validators=[
                            papermerge.core.validators.safe_character_validator
                        ],
                        verbose_name="name",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "ordering": ["name"],
                "unique_together": {("name", "user")},
            },
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, primary_key=True, serialize=False
                    ),
                ),
                ("number", models.IntegerField(default=1)),
                ("page_count", models.IntegerField(default=1)),
                ("text", models.TextField(default="")),
                ("norm_doc_title", models.CharField(default="", max_length=200)),
                ("norm_folder_title", models.CharField(default="", max_length=200)),
                ("norm_breadcrump", models.CharField(default="", max_length=1024)),
                ("norm_text", models.TextField(default="")),
                ("lang", models.CharField(default="deu", max_length=8)),
                ("image", models.CharField(default="", max_length=1024)),
                (
                    "document_version",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pages",
                        to="core.documentversion",
                    ),
                ),
            ],
            options={
                "ordering": ["number"],
            },
        ),
        migrations.CreateModel(
            name="ColoredTag",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.UUIDField(db_index=True, verbose_name="object ID"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_tagged_items",
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="core.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="basetreenode",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A comma-separated list of tags.",
                through="core.ColoredTag",
                to="core.Tag",
                verbose_name="Tags",
            ),
        ),
        migrations.AddField(
            model_name="basetreenode",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="nodes",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="documentversion",
            name="document",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="versions",
                to="core.document",
                verbose_name="Document",
            ),
        ),
        migrations.AddConstraint(
            model_name="basetreenode",
            constraint=models.UniqueConstraint(
                fields=("parent", "title", "user_id"),
                name="unique title per parent per user",
            ),
        ),
        migrations.AddConstraint(
            model_name="basetreenode",
            constraint=models.UniqueConstraint(
                condition=models.Q(("parent__isnull", True)),
                fields=("title", "user_id"),
                name="title_uniq_when_parent_is_null_per_user",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="home_folder",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="home_folder_of",
                to="core.folder",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="inbox_folder",
            field=models.OneToOneField(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="inbox_folder_of",
                to="core.folder",
            ),
        ),
    ]
