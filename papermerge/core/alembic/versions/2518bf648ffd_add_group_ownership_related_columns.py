"""add group ownership related columns

Revision ID: 2518bf648ffd
Revises: 1a5a9bffcad4
Create Date: 2025-03-17 07:27:40.281993

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "2518bf648ffd"
down_revision: Union[str, None] = "1a5a9bffcad4"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # custom fields
    op.add_column("custom_fields", sa.Column("group_id", sa.Uuid(), nullable=True))
    with op.batch_alter_table("custom_fields") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=True)

    if conn.dialect.name != "sqlite":
        op.create_foreign_key(
            "custom_fields_group_id_fkey",
            "custom_fields",
            "groups",
            ["group_id"],
            ["id"],
        )
        op.create_check_constraint(
            constraint_name="check__user_id_not_null__or__group_id_not_null",
            table_name="custom_fields",
            condition="user_id IS NOT NULL OR group_id IS NOT NULL",
        )

    # document types
    op.add_column("document_types", sa.Column("group_id", sa.Uuid(), nullable=True))

    with op.batch_alter_table("document_types") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=True)

    op.drop_constraint(
        "unique document type per user", "document_types", type_="unique"
    )
    op.create_unique_constraint(
        "unique document type per user",
        "document_types",
        ["name", "user_id"],
    )
    op.create_unique_constraint(
        "unique document type per group",
        "document_types",
        ["name", "group_id"],
    )
    op.create_foreign_key(
        "document_types_group_id_fkey",
        "document_types",
        "groups",
        ["group_id"],
        ["id"],
    )
    op.create_check_constraint(
        constraint_name="check__user_id_not_null__or__group_id_not_null",
        table_name="document_types",
        condition="user_id IS NOT NULL OR group_id IS NOT NULL",
    )
    #### groups
    op.add_column("groups", sa.Column("home_folder_id", sa.Uuid(), nullable=True))
    op.add_column("groups", sa.Column("inbox_folder_id", sa.Uuid(), nullable=True))

    op.create_foreign_key(
        "groups_inbox_folder_id_fkey",
        "groups",
        "folders",
        ["inbox_folder_id"],
        ["node_id"],
        ondelete="CASCADE",
        deferrable=True,
    )
    op.create_foreign_key(
        "groups_home_folder_id_fkey",
        "groups",
        "folders",
        ["home_folder_id"],
        ["node_id"],
        ondelete="CASCADE",
        deferrable=True,
    )
    ### nodes
    op.add_column("nodes", sa.Column("group_id", sa.Uuid(), nullable=True))

    with op.batch_alter_table("nodes") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=True)

    op.drop_constraint("unique title per parent per user", "nodes", type_="unique")
    op.create_unique_constraint(
        "unique title per parent per user",
        "nodes",
        ["parent_id", "title", "user_id"],
    )
    op.create_unique_constraint(
        "unique title per parent per group",
        "nodes",
        ["parent_id", "title", "group_id"],
    )
    op.create_foreign_key(
        "nodes_group_id_fkey",
        "nodes",
        "groups",
        ["group_id"],
        ["id"],
        ondelete="CASCADE",
        use_alter=True,
    )
    op.create_check_constraint(
        constraint_name="check__user_id_not_null__or__group_id_not_null",
        table_name="nodes",
        condition="user_id IS NOT NULL OR group_id IS NOT NULL",
    )

    # tags
    op.add_column("tags", sa.Column("group_id", sa.Uuid(), nullable=True))

    with op.batch_alter_table("tags") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=True)

    op.drop_constraint("unique tag name per user", "tags", type_="unique")
    op.create_unique_constraint("unique tag name per user", "tags", ["name", "user_id"])
    op.create_unique_constraint(
        "unique tag name per group", "tags", ["name", "group_id"]
    )
    op.create_foreign_key(None, "tags", "groups", ["group_id"], ["id"])
    op.create_check_constraint(
        constraint_name="check__user_id_not_null__or__group_id_not_null",
        table_name="tags",
        condition="user_id IS NOT NULL OR group_id IS NOT NULL",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # tags
    op.drop_constraint("unique tag name per user/group", "tags", type_="unique")
    op.create_unique_constraint("unique tag name per user", "tags", ["name", "user_id"])

    with op.batch_alter_table("tags") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=False)

    op.drop_column("tags", "group_id")

    # nodes
    op.drop_constraint("nodes_group_id_fkey", "nodes", type_="foreignkey")
    op.drop_constraint(
        "unique title per parent per user/group", "nodes", type_="unique"
    )
    op.create_unique_constraint(
        "unique title per parent per user",
        "nodes",
        ["parent_id", "title", "user_id"],
    )

    with op.batch_alter_table("nodes") as batch_op:
        batch_op.alter_column(
            "nodes", "user_id", existing_type=sa.UUID(), nullable=False
        )

    op.drop_column("nodes", "group_id")

    # groups
    op.drop_constraint("groups_home_folder_id_fkey", "groups", type_="foreignkey")
    op.drop_constraint("groups_inbox_folder_id_fkey", "groups", type_="foreignkey")

    op.drop_column("groups", "inbox_folder_id")
    op.drop_column("groups", "home_folder_id")

    # document_types
    op.drop_constraint(
        "document_types_group_id_fkey", "document_types", type_="foreignkey"
    )
    op.drop_constraint(
        "unique document type per user/group", "document_types", type_="unique"
    )
    op.create_unique_constraint(
        "unique document type per user", "document_types", ["name", "user_id"]
    )

    with op.batch_alter_table("document_types") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=False)

    op.drop_column("document_types", "group_id")

    # custom_fields
    op.drop_constraint(
        "custom_fields_group_id_fkey", "custom_fields", type_="foreignkey"
    )

    with op.batch_alter_table("custom_fields") as batch_op:
        batch_op.alter_column("user_id", existing_type=sa.UUID(), nullable=False)

    op.drop_column("custom_fields", "group_id")
    # op.drop_constraint(
    #    "check__user_id_not_null__or__group_id_not_null",
    #    "custom_fields",
    #    type_="check",
    # )
    # ### end Alembic commands ###
