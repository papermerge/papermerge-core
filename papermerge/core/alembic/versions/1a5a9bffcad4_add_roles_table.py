"""add roles table

Revision ID: 1a5a9bffcad4
Revises: bafd773c8533
Create Date: 2025-03-15 12:01:49.091757

"""

import os
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

DATABASE_URL = os.environ.get("PAPERMERGE__DATABASE__URL")

# revision identifiers, used by Alembic.
revision: str = "1a5a9bffcad4"
down_revision: Union[str, None] = "bafd773c8533"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "roles",
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "roles_permissions",
        sa.Column("role_id", sa.Uuid(), nullable=True),
        sa.Column("permission_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
    )
    op.create_table(
        "users_roles",
        sa.Column("role_id", sa.Uuid(), nullable=True),
        sa.Column("user_id", sa.Uuid(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    op.drop_table("groups_permissions")
    op.drop_table("users_permissions")
    if DATABASE_URL and not DATABASE_URL.startswith("sqlite"):
        op.create_unique_constraint(None, "groups", ["name"])
        op.create_unique_constraint(None, "permissions", ["name"])
        op.create_unique_constraint(None, "permissions", ["codename"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if DATABASE_URL and not DATABASE_URL.startswith("sqlite"):
        op.drop_constraint(None, "permissions", type_="unique")
        op.drop_constraint(None, "permissions", type_="unique")
        op.drop_constraint(None, "groups", type_="unique")
    op.create_table(
        "users_permissions",
        sa.Column("user_id", sa.CHAR(length=32), nullable=True),
        sa.Column("permission_id", sa.CHAR(length=32), nullable=True),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
    )
    op.create_table(
        "groups_permissions",
        sa.Column("group_id", sa.CHAR(length=32), nullable=True),
        sa.Column("permission_id", sa.CHAR(length=32), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["groups.id"],
        ),
        sa.ForeignKeyConstraint(
            ["permission_id"],
            ["permissions.id"],
        ),
    )
    op.drop_table("users_roles")
    op.drop_table("roles_permissions")
    op.drop_table("roles")
    # ### end Alembic commands ###
