"""v3.6: 0001: add audit columns

Revision ID: 2973d27f1e0d
Revises: 50ef5a403d27
Create Date: 2025-08-19 07:42:18.480758

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2973d27f1e0d'
down_revision: Union[str, None] = '50ef5a403d27'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('custom_fields', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('custom_fields', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('custom_fields', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('custom_fields', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('custom_fields', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('custom_fields', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('custom_fields', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.alter_column('custom_fields', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.add_column('document_types', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('document_types', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('document_types', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('document_types', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('document_types', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('document_types', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('document_types', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.alter_column('document_types', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.add_column('document_versions', sa.Column('mime_type', sa.Integer(), nullable=True))
    op.add_column('document_versions', sa.Column('checksum', sa.String(), nullable=True))
    op.add_column('document_versions', sa.Column('checksum_algorithm', sa.String(), nullable=True))
    op.add_column('document_versions', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('document_versions', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('document_versions', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('document_versions', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('document_versions', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('document_versions', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('document_versions', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('document_versions', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.add_column('groups', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('groups', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('groups', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('groups', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('groups', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('groups', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('groups', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('groups', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.add_column('nodes', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('nodes', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('nodes', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('nodes', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('nodes', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('nodes', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.alter_column('nodes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.alter_column('nodes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    op.add_column('roles', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('roles', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('roles', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('roles', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('roles', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('roles', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('roles', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('roles', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.add_column('shared_nodes', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('shared_nodes', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('shared_nodes', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('shared_nodes', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('shared_nodes', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('shared_nodes', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.add_column('tags', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('tags', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.add_column('tags', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('tags', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('tags', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('tags', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('tags', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('tags', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.add_column('users', sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('users', sa.Column('archived_at', postgresql.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('users', sa.Column('created_by', sa.Uuid(), nullable=True))
    op.add_column('users', sa.Column('updated_by', sa.Uuid(), nullable=True))
    op.add_column('users', sa.Column('deleted_by', sa.Uuid(), nullable=True))
    op.add_column('users', sa.Column('archived_by', sa.Uuid(), nullable=True))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('users', 'archived_by')
    op.drop_column('users', 'deleted_by')
    op.drop_column('users', 'updated_by')
    op.drop_column('users', 'created_by')
    op.drop_column('users', 'archived_at')
    op.drop_column('users', 'deleted_at')
    op.drop_column('tags', 'archived_by')
    op.drop_column('tags', 'deleted_by')
    op.drop_column('tags', 'updated_by')
    op.drop_column('tags', 'created_by')
    op.drop_column('tags', 'archived_at')
    op.drop_column('tags', 'deleted_at')
    op.drop_column('tags', 'updated_at')
    op.drop_column('tags', 'created_at')
    op.drop_column('shared_nodes', 'archived_by')
    op.drop_column('shared_nodes', 'deleted_by')
    op.drop_column('shared_nodes', 'updated_by')
    op.drop_column('shared_nodes', 'created_by')
    op.drop_column('shared_nodes', 'archived_at')
    op.drop_column('shared_nodes', 'deleted_at')
    op.drop_column('roles', 'archived_by')
    op.drop_column('roles', 'deleted_by')
    op.drop_column('roles', 'updated_by')
    op.drop_column('roles', 'created_by')
    op.drop_column('roles', 'archived_at')
    op.drop_column('roles', 'deleted_at')
    op.drop_column('roles', 'updated_at')
    op.drop_column('roles', 'created_at')
    op.alter_column('nodes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.alter_column('nodes', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('nodes', 'archived_by')
    op.drop_column('nodes', 'deleted_by')
    op.drop_column('nodes', 'updated_by')
    op.drop_column('nodes', 'created_by')
    op.drop_column('nodes', 'archived_at')
    op.drop_column('nodes', 'deleted_at')
    op.drop_column('groups', 'archived_by')
    op.drop_column('groups', 'deleted_by')
    op.drop_column('groups', 'updated_by')
    op.drop_column('groups', 'created_by')
    op.drop_column('groups', 'archived_at')
    op.drop_column('groups', 'deleted_at')
    op.drop_column('groups', 'updated_at')
    op.drop_column('groups', 'created_at')
    op.drop_column('document_versions', 'archived_by')
    op.drop_column('document_versions', 'deleted_by')
    op.drop_column('document_versions', 'updated_by')
    op.drop_column('document_versions', 'created_by')
    op.drop_column('document_versions', 'archived_at')
    op.drop_column('document_versions', 'deleted_at')
    op.drop_column('document_versions', 'updated_at')
    op.drop_column('document_versions', 'created_at')
    op.drop_column('document_versions', 'checksum_algorithm')
    op.drop_column('document_versions', 'checksum')
    op.drop_column('document_versions', 'mime_type')
    op.alter_column('document_types', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('document_types', 'archived_by')
    op.drop_column('document_types', 'deleted_by')
    op.drop_column('document_types', 'updated_by')
    op.drop_column('document_types', 'created_by')
    op.drop_column('document_types', 'archived_at')
    op.drop_column('document_types', 'deleted_at')
    op.drop_column('document_types', 'updated_at')
    op.alter_column('custom_fields', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_column('custom_fields', 'archived_by')
    op.drop_column('custom_fields', 'deleted_by')
    op.drop_column('custom_fields', 'updated_by')
    op.drop_column('custom_fields', 'created_by')
    op.drop_column('custom_fields', 'archived_at')
    op.drop_column('custom_fields', 'deleted_at')
    op.drop_column('custom_fields', 'updated_at')
    # ### end Alembic commands ###
